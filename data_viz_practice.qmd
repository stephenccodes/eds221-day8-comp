---
title: "EDS 221 day 8 interactive"
author: "Stephen Carroll"
format: html
editor_options: 
  chunk_output_type: console
---

```{r}
library(here)
library(tidyverse)
library(janitor)

# install new plotting packages ----
install.packages("patchwork")
install.packages("ggrepel")
install.packages("gghighlight")
install.packages("paletteer")
install.packages("ggExtra")
install.packages("ggbeeswarm")
# and for another datset we will explore ----
install.packages("gapminder")
# spatial ----
install.packages("sf")
```


```{r}
# attach packages ----

library(patchwork)
library(ggrepel)
library(gghighlight)
library(paletteer)
library(ggExtra)
library(ggbeeswarm)
library(gapminder)
library(sf)
```

```{r}
# read in the data ----
lizards <- read_csv(here("data_tidy", "lizards.csv"))
```

```{r}
# different ways to plot the same graph ----
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() +
  geom_line()

ggplot(data = lizards) +
  geom_point(aes(x = total_length, y = weight))

ggplot() +
  geom_point(data = lizards, aes(x =total_length, y = weight))
```


```{r}
# a simple histogram ----
ggplot(data = lizards, aes(x =total_length))+
  geom_histogram()
```

```{r}
# a basic jitter plot ----
ggplot(data = lizards, aes(y = common_name, x = weight))+
  geom_jitter()
```

```{r}
# aesthetics in the geom() are going to be based on the variable ----
ggplot(dat = lizards, aes(x = weight))+
  geom_histogram(color = "orange", 
                 fill = "purple", 
                 linewidth = 2, 
                 linetype = "dotted")
```


```{r}
# color codes can be used ----
# look up number codes for differnt shapes ----
# adjust size and opacity with alpha ---
ggplot(data =  lizards, aes(x = total_length, y = weight)) +
  geom_point(color = "#52B2CF",
             fill = "#D1CFE2", 
             shape = 22, 
             size = 4, 
             alpha = 0.5)
```

```{r}
# updating an aesthetics based on a variable ----
# anything based on a variable goes inside the aesthetic() ----
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = common_name,
                 size = total_length),
             alpha = 0.5)

```

```{r}
# exploring different themes ----
ggplot(data = lizards, aes(x = site, y = weight)) +
  geom_jitter(aes(color = common_name))+
  theme_light()
```

```{r}
# add a title and labels to your axes ----
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point()+
  labs(x = "Total length (mm)", 
       y = "Weight (grams)", title = "Lizard Site")
```

```{r}
# use facet_wrap or facet_grid to create multiple plots ----
# use scales = "free" to have indiv. plots with independent scales ----
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point()+
  facet_wrap(~common_name, ncol = 3, scales = "free") +
  labs(x = "Total length (mm)",
       y = "Weight (grams)")
```


```{r}
# use facet_grid to plot data subsets based on variables ----
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() +
  facet_grid(sex ~ tail)
```

```{r}
# changing the order of variables in plots ----
lizards_counts <- lizards %>%
  count(common_name) 

ggplot(data = lizards_counts, aes(y = fct_reorder(common_name, n), x = n)) +
  geom_col() 
```

```{r}
# an example using some of these tools ----
geom_point(aes(color = common_name),
             size = 2) +
  theme_minimal() +
  labs( x = "Total length (mm)",
        y = "Weight (g)",
        color = "Lizard species")+
  facet_wrap(~ common_name, scales = "free")

```

```{r}
# another big example combining styles ---

ggplot(data = lizards, aes(y = fct_infreq(common_name))) +
  geom_bar(aes(fill = site)) +
  theme_minimal() +
  labs(x = "Lizard counts", 
       y = "Species (common name)") +
  facet_grid(sex ~ tail)
```

```{r}
# adjust the scale of the graph ----
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() +
  scale_x_continuous(breaks = c(0,250,500),
                     limits = c(0,500)) +
  scale_y_continuous(breaks = seq(0,70,10),
                     limits = c(0,70))+
  theme_light()

```

```{r}
# dates on the axes with scale ----
lizards_counts <- lizards %>%
  mutate(date = lubridate::mdy(date)) %>%
  count(date)

ggplot(data = lizards_counts, aes(x = date, y = n)) +
  geom_line()+
  scale_x_date(breaks = scales::breaks_pretty()) +
  #scale_x_date(breaks = scales::breaks_width("3 years"), 
   #            labels = scales::label_date("'%y"))+
  labs(x = "Date",
       y = "Number of lizards (n)")
```

```{r}
# using differnt scale_ functions to customize aesthetics ----
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = weight)) +
  scale_color_steps(low = "red", high = "black")
  #scale_color_gradientn(colors = c("orange", "red", "purple", "navy", "black"))
  #scale_color_gradient(low = "red", high = "navy")
```

```{r}
# create a plot and save it as a variable to easily make future changes to it ----
# adjust the plot background with different plot. functions ----
p <- ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point()

p +
  theme(panel.grid = element_blank(),
        panel.grid.major = element_line(color = "red"),
        plot.background = element_rect(fill = "pink"),
        text = element_text(size = 12, family = "serif"),
        axis.text.x = element_text(color = "blue"),
        axis.text.y = element_text(color = "green"),
        panel.background = element_rect(color = "purple", fill = "yellow"))
```


```{r}
# draw intercept lines and add labels to plot points ----
p +
  geom_hline(yintercept = mean(lizards$weight), color = "blue", linetype = "dashed") +
  geom_vline(xintercept = 100, color = "red") +
  annotate("text", x = 100, y = 50, label = "COOL!", color = "purple")+
  annotate("text", x = 350, y = mean(lizards$weight) + 2,
           label ="Mean weight")
  
```

```{r}
# read in new data ----

mono <- read_csv(here("data_tidy", "mono.csv"))

# use "\n" around axis label to make it a sub title ----
# use annotate to add labels that don't correspond to axes ----
ggplot(data = mono, aes(x = year, y = lake_level)) +

  geom_rect(aes(xmin = 1941, 
                xmax = 1983,
                ymin = 6350, 
                ymax = 6440),
            fill = "gray90",
            alpha = 0.05)+
  geom_line() +
  labs(x = "Year",
       y = "Lake surface level\n(feet above sea level)\n",
       title = "Mono Lake (1850 - 2017)",
       caption = "Data: Mono Basin Clearinghouse") +
  scale_y_continuous(limits = c(6350, 6440),
                     breaks = c(6370, 6400, 6430),
                     labels = scales::label_comma()) +
  scale_x_continuous(limits = c(1850, 2020),
                     breaks = seq(1850, 2010, by = 20),
                     expand = c(0,0))+
  geom_hline(yintercept = 6360, linetype = "dashed")+
  annotate("text", x = 1910, y = 6370,
           label = "Decreased shrimp abundance expected\n(6360 feet above sea level)")+
  annotate("text", x = 1962, y = 6425,
           label = "unrestricted diversions\n(1941-1983",
           size = 3)
  theme_minimal()
```

